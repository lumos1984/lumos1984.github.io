{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-04-14T10:40:34.980Z","updated":"2022-04-14T10:40:34.980Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-04-14T10:40:34.989Z","updated":"2022-04-14T10:40:34.989Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2022-04-14T10:40:34.993Z","updated":"2022-04-14T10:40:34.993Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-14T10:40:34.999Z","updated":"2022-04-14T10:40:34.999Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-04-14T10:40:34.996Z","updated":"2022-04-14T10:40:34.996Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-04-14T10:40:35.002Z","updated":"2022-04-14T10:40:35.002Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-04-14T10:40:35.006Z","updated":"2022-04-14T10:40:35.006Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"DOM","slug":"DOM速览","date":"2022-04-14T16:04:23.744Z","updated":"2022-04-14T16:05:38.366Z","comments":true,"path":"2022/04/15/DOM速览/","link":"","permalink":"http://example.com/2022/04/15/DOM%E9%80%9F%E8%A7%88/","excerpt":"","text":"一、Web APIs1.语法基础 1.变量规范 console.log(isNaN(12)); &#x2F;&#x2F; false 判断非数字 字符串转义符： ※算数运算符，前置递增，后置递增，比较运算，逻辑运算，赋值运算 2.逻辑分支 if分支语句、if else双分支语句、if else if多分支语句 三元表达式 switch语句 3.循环结构 for循环、双重for循环 while循环 do while循环 continue和break 4.数组* new创建：var arr &#x3D; new Array(); 或者字面量 var arr1 &#x3D; [1, 2, ‘pink老师’, true]; 5.函数 arguments 的使用 冒泡排序 作用域 预解析 二、BOMES5 中常见的数组常用方法 &#x2F; indexOf 用来找到数组中某一项的索引 forEach 和循环一个作用，遍历数组无返回值 map map :和forEach类似，遍历并对每一个元素进行处理返回一个新数组 做批量处理用的 filter 过滤和 map 的使用方式类似，遍历并检查每个元素 符合条件留下 不符合就过滤 返回新数组 find 查找出第一个符合条件的数组成员，并返回该成员 every 遍历每个元素 试图验证所有的元素都符合条件 some 遍历每个元素 试图找到一个符合条件的元素 reduce 1.数组对象Array：添加或删除数组的方法push等 &#x2F; 数组末尾添加元素 push(元素) 删除末尾元素 pop() 数组头部插入元素 unshift(元素) 删除头部元素 shift() 截取元素 arr.splice(1,2) 反转数组元素 reverse() 由小到大排序 sort() 多个数组进行拼接 arr.concat(arr1) 数组里面的每一项内容链接 join() 根据内容找下标 arr.indexOf(20) 2.字符串方法 &#x2F; 找到字符串中指定索引位置的内容返回 charAt(索引) 返回指定下标位置的字符的unicode编码 charCodeAt :(不常用) 回某个指定的子字符串在字符串中第一次出现的位置 indexOf lastIndexOf 截取字符串中介于两个指定下标之间的字符 substring(开始索引，结束索引) (不常用)返回从指定下标开始指定长度的的子字符串 substr(开始索引，字符个数) 在字符串中用一些字符(返回)替换另一些字符 replace() 将分割之后的字符存储数组中返回 split(‘用于分割字符’) 删除字符串两段的空白,返回去掉空白的新字符 trim() 数组包含，不常用 includes() &#x2F;&#x2F;&#x2F;&#x2F; contact() 判断字符串是否以子字符串开始 startsWith() 判断字符串是否以子字符串结束 endsWith() 将字符串转换为大写返回 toLowerCase() 将字符串转换为小写返回 toUpperCase() 3.Math和Date 4.倒计时 5.BOM &#x2F; window对象常见事件 窗口加载事件 window.onload &#x3D; function(){} window.addEventListener(“load”,function(){}); 调整窗口大小 window.onresize &#x3D; function(){} window.addEventListener(“resize”,function(){}); 两种定时器 window.setTimeout(调用函数, [延迟的毫秒数]); window.setInterval(回调函数, [间隔的毫秒数]); 停止定时器 window.clearTimeout(timeoutID) window.clearInterval(intervalID); loacation对象和方法： ![image-20211021161245036](C:\\Users\\Administrator\\Desktop\\一些笔记10\\img\\location 2.png) navigator 对象和方法 history对象和方法 三、DOM一、DOM文档对象模型 我们可以操作哪些内容：获取一个元素、移除一个元素、创建一个元素、向页面里面添加一个元素、给元素绑定一些事件、获取元素的属性、给元素添加一些 css 样式 1.2-document对象* document对象属性 属性 说明 title 文档标题，即title标签内容 URL 文档地址 fileCreateDate 文档创建日期 fileModifiedDate 文档修改时间(精确到天) fileModified 文档修改时间(精确到秒) fileSize 文档大小 fgColor 定义文档的前景色 bgColor 定义文档的背景色 linkColor 定义”未访问”的超链接颜色 alinkColor 定义”被激活”的超链接颜色 vlinkColor 定义”被访问”的超链接颜色 document对象方法 方法 说明 document.write() 输入文本到当前打开的文档 document.writeIn() 输入文本到当前打开的文档，并添加换位符”\\n” document.getElementById() 获取某个id值的元素 document.getElementsByName() 获取某个name值的元素，用于表单元素 1.3-获取html元素!!获取html元素!! 语法 说明 getElementById(‘id属性值’) 获取特定id元素 getElementsByClassName(‘class属性’) 需要索引获取，得到一组伪数组 getElementsByTagName(‘标签名’) 同上，用索引得到一组元素 getElementsByName(‘name属性’) &#x2F; querySelector() css选择器，索引，得到第一个元素 querySelectorAll() css选择器，索引，得到伪数组 1.4-操作元素内容!!1.4-操作元素内容!! innerHtml innerText value&#x2F; 多数浏览器支持 IE、谷歌等支持，火狐不行 &#x2F; &#x2F; &#x2F; &#x2F; 在JavaScript中，我们可以使用innerHTML和innerText这2个属性很方便地获取和设置某个元素内部子元素或文本 1.5-操作元素css样式1.5-操作元素css样式!! style 行内样式 className &#x2F;class类样式 classList 动态添加移除class类样式 &#x2F; 1.用来操作元素的类名 1.添加样式div.classList.add(‘active’); &#x2F; 2.设置元素的类名(全覆盖式) 2.移除指定样式div.classList.remove(‘active’); 获取非行间样式：window.getComputedStyle(节点).width 1.6-操作元素属性操作元素属性 getAttribute(‘属性名’) setAttribute(‘属性名’,”属性值”) removeAttribute(‘属性名’) 获取元素的某个属性 给元素设置一个属性 直接移除元素的某个属性 二、DOM节点1.1-简介 1.2-DOM节点类型 1.整个文档是一个文档节点 &#x2F; 2.每个 HTML 元素是元素节点 getElementsBy… 3.HTML 元素内的文本是文本节点 innerText 4.每个 HTML 属性是属性节点 getAttribute(‘属性名’) 5.注释是注释节点 &#x2F; 3.DOM节点树形结构 4.DOM节点关系 2.获取节点2.1-获取元素节点 getElement系列 querySelector系列 &#x2F; &#x2F; 2.2-层次关系获取节点 children ：获取某一节点下所有的子一级 元素节点 2.3-层次关系获取元素节点 firstElementChild lastElementChild 2.4-获取元素节点的所有属性节点: attributes* 2.5-层次图* 2.6-非常规节点获取 获取html根节点 获取body节点 获取head document.documentElement document.body document.head 3.节点属性 4.操作DOM节点 4.1-创建节点 createElement：创建一个元素节点 createTextNobe：创建一个文本节点 &#x2F; &#x2F; createAttribute: 创建属性节点 setAttruibuteNode: 给元素节点设置属性节点 4.2-增删改隆节点* 操作 语法 说明 加入节点 父亲点.appendChild(要插入的子节点) &#x2F; .. 父亲点.insertBefore(要插入的子节点,插入在哪一个节点) &#x2F; 删除节点 父亲点.removeChild(移除的子节点) remove()移除当前节点 .. 父亲点.remove(移除当前节点) x 替换节点 父亲点.replaceChild：将页面中的某一个节点替换掉 &#x2F; 复制节点 语法： 节点.cloneNode(truefalse) true: 复制节点包含节点下所有子节点； false: 复制当前节点 添加复杂的节点：模板字符串+复制内容，如 1234567let str = `&lt;div&gt; &lt;img src = &quot;&quot;/&gt; &lt;p&gt;&lt;/p&gt; &lt;button&gt;&lt;/button&gt; &lt;/div&gt;` divNode.innerHTML = str 5.获取元素的非行间样式5.1-元素.style.xxx 来获取元素的样式* getComputedStyle（非IE使用） currentStyle（IE使用） 6.获取元素的偏移量 offsetLeft 和 offsetTop offsetWidth 和 offsetHeight 7.获取元素尺寸（宽、高）三种方式 offsetWidth &#x3D; 内容width + padding + border clientWidth &#x3D; 内容width + padding window.getComputedStyle(divEle).width &#x3D; 内容width 8.坑点* 12345document.getElementByClassName会更新旧的查询结果 document.querySelector则不会比如: document.querySelectorAll(&#x27;.li1&#x27;) =&gt; 获取所有类名为li1的元素，长度为3 =&gt; 动态添加一个类名li1元素，长度还是为3 三、事件3.1-事件简介+事件源 +事件类型 click，change，submit … +事件处理函数 btn.onclick &#x3D; function(){ &#x2F;&#x2F;生成一个对象Event} 3.2-事件对象Event3.3-事件的光标坐标点获取 相对事件源（你点击的元素）offsetX,offsetY 相对于浏览器窗口(clientX,clientY) 相对于页面(pageX,pageY) 3.4-浏览器常见事件（了解*1.浏览器事件 load ： 页面全部资源加载完毕 scroll ： 浏览器滚动的时候触发 resize 页面大小事件 … 2.鼠标事件 click ：点击事件 dbclick ：双击事件 contextmenu ： 右键单击事件 mousedown ：鼠标左键按下事件 mouseup ：鼠标左键抬起事件 mousemove ：鼠标移动 mouseover ：鼠标移入事件 mouseout ：鼠标移出事件 mouseenter ：鼠标移入事件 mouseleave ：鼠标移出事件 3.键盘事件 keyup ： 键盘抬起事件 keydown ： 键盘按下事件 keypress ： 键盘按下再抬起事件 … 4.表单事件 change : 表单内容改变事件 input : 表单内容输入事件 submit : 表单提交事件 … 5.触摸事件 touchstart ： 触摸开始事件 touchend ： 触摸结束事件 touchmove ： 触摸移动事件 … 3.5-事件的绑定方式 事件属性 &#96;&#96;&#96;js&lt;input type&#x3D;”button” onclick&#x3D;”alertMessage()” value&#x3D;”按钮”&#x2F;1234567891011121314151617181920212223242526272829303132332. 事件绑定 - oDiv.onclick = function()&#123;&#125;3. 事件监听!! - `元素.addEventListener(&#x27;事件类型&#x27;，事件处理函数，冒泡还是捕获)` : 非 IE 7 8 下使用 - ~~attachEvent ：IE 7 8 下使用~~##### 3.6-事件的执行机制1. 事件的传播2. 事件的传播方向 + 事件冒泡 + 事件捕获3. 事件目标对象 target，~~在 IE 下要使用 srcElement~~ + 当我点击哪个元素时，event.target返回的是点击的元素节点 + event.currentTarget返回的是绑定事件的元素4. **事件委托！！**5. 阻止事件传播- `e.stopPropagation()` 标准浏览器- ~~e.cancelBubble=true IE低版本~~```js//兼容写法if(e.stopPropagation)&#123; e.stopPropagation()&#125;else&#123; e.cancelBubble = true&#125; 3.7-默认行为*阻止默认行为 e.preventDefault() 123456789101112131415161718192021222324252627282930313233&lt;!-- 阻止默认行为 a标签默认行为: 跳转到href属性指定的网页 表单 action默认行为 --&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; --&gt; &lt;a href=&quot;javascript:void(0)&quot;&gt;百度&lt;/a&gt; &lt;form action=&quot;http://www.baidu.com&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;button type=&quot;submit&quot;&gt;确定&lt;/button&gt; &lt;/form&gt; &lt;script&gt; var aEle = document.querySelector(&#x27;a&#x27;) var formEle = document.querySelector(&#x27;form&#x27;) aEle.addEventListener(&#x27;click&#x27;,function(e)&#123; e = e || window.event e.preventDefault() //阻止默认行为 console.log(&#x27;百度执行&gt;&gt;&gt;&#x27;) &#125;) formEle.addEventListener(&#x27;submit&#x27;,function(e)&#123; e = e || window.event e.preventDefault() //阻止默认行为 console.log(&#x27;表单提交&#x27;) &#125;) &lt;/script&gt; 四、this与ES6(day15)4.1-函数补充 自调用函数 arguments 123456789function fn(m, n) &#123; console.log(arguments) console.log(arguments.length) for (var i = 0; i &lt; arguments.length; i++) &#123; console.log(arguments[i]) &#125; &#125; fn(10, 20, 30) 4.2-this关键字（指向 每一个函数内部都有一个关键字是 this 函数内部的 this 指向谁，取决于函数的调用方式 this指向5种 1.普通函数 this&#x3D;&gt; window对象(浏览器核心对象) function fn() { console.log(‘this’, this) this.a &#x3D; 10 &#x2F;&#x2F;给window创建一个名为a的属性 } fn() 2.对象方法中的 this&#x3D;&gt; 方法调用者 var obj &#x3D; { username: ‘admin’, age: 23, say: function() { console.log(‘say this-&gt;’, this) } } obj.this() 3.定时器 setTimeout setInterval this&#x3D;&gt; window对象 setTimeout function(){ console.log(‘定时器 this-&gt;’,this) },1000) 4.事件处理函数 &#x3D;&gt;场景源 var divEle &#x3D; document.querySelector(‘div’) divEle.addEventListener(‘click’，function(){ console.log(‘事件处理函数 this-&gt;’,this) }) 5.自调用(执行函数) &#x3D;&gt;window function fn() { console.log(‘this’, this) this.a &#x3D; 10 &#x2F;&#x2F;给window创建一个名为a的属性 } fn() 改变函数指向3种 1)call 函数 &#x3D;&gt;函数调用同时 改变函数中this指向对象 + 语法 `函数名.call(要指向的对象，参数1，参数2)` 2） apply 方函数调用同时 改变函数中this指向对象 + 语法 `函数名.apply(要指向的对象,[参数1,参数2..])` 3）bind 不会立即执行函数，返回改变this指向的新函数 + 语法：`var newFn = 函数名.bind(要指向的对象)` ES6新特性 新增声明变量 let 和 const let 和 const 不允许重复声明变量 不能变量提升 没有定义直接使用 let 和 const 声明的变量只能在块作用域起作用 二、10.13笔记笔记 作用 代码 备注 根据 ID 获取 document.getElementById() 可以获取元素对象的集合 根据标签名获取 document.getElementsByTagName() 方法可以获取元素对象的集合 element.getElementsByTagName(&#39;标签名&#39;); 获取父元素内部所有指定标签的子元素 通过HTML5新增的方法获取 document.getElementsByClassName(&#39;类名&#39;) document.querySelector(&#39;选择器&#39;) document.querySelectorAll(&#39;选择器&#39;) 获取特殊元素(body,html) document.body document.documentElement 4.1-改变元素内容 element.innerText 纯文本 element.innerHTML 用来设置或获取位于对象起始和结束标签内的HTML 4.4-样式属性操作 element.style element.className 6.1-创建 documen.write&#96; innerHTML createElement 6.2-增 appendChild insertChild 6.3-删 removeChild","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"这是标题","slug":"hello-world","date":"2022-04-14T08:48:34.401Z","updated":"2022-04-14T16:04:05.107Z","comments":true,"path":"2022/04/14/hello-world/","link":"","permalink":"http://example.com/2022/04/14/hello-world/","excerpt":"","text":"大家好hello","categories":[{"name":"分类","slug":"分类","permalink":"http://example.com/categories/%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"标签","slug":"标签","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE/"}]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"分类","slug":"分类","permalink":"http://example.com/categories/%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"标签","slug":"标签","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE/"}]}